// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/HMasataka/config"
	"github.com/HMasataka/ranking-maker/domain/service"
	"github.com/HMasataka/ranking-maker/infrastructure"
	"github.com/HMasataka/ranking-maker/infrastructure/persistence"
	"github.com/HMasataka/transactor/redis"
)

// Injectors from queue.wire.go:

func InitializeQueueService(cfg *config.RedisConfig) service.QueueService {
	client := infrastructure.NewRedisClient(cfg)
	connectionProvider := redis.NewConnectionProvider(client)
	clientProvider := redis.NewClientProvider(connectionProvider)
	queueRepository := persistence.NewQueueRepository(clientProvider)
	queueService := service.NewQueueService(connectionProvider, queueRepository)
	return queueService
}

// Injectors from rank.wire.go:

func InitializeRankService(cfg *config.RedisConfig) service.RankService {
	client := infrastructure.NewRedisClient(cfg)
	connectionProvider := redis.NewConnectionProvider(client)
	clientProvider := redis.NewClientProvider(connectionProvider)
	rankRepository := persistence.NewRankRepository(clientProvider)
	rankService := service.NewRankService(connectionProvider, rankRepository)
	return rankService
}

// Injectors from score.wire.go:

func InitializeScoreService(cfg *config.RedisConfig) service.ScoreService {
	client := infrastructure.NewRedisClient(cfg)
	connectionProvider := redis.NewConnectionProvider(client)
	clientProvider := redis.NewClientProvider(connectionProvider)
	scoreRepository := persistence.NewScoreRepository(clientProvider)
	scoreService := service.NewScoreService(connectionProvider, scoreRepository)
	return scoreService
}
